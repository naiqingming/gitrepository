---------------------------nginx限流------------------------------
1.控制访问速率-->漏桶算法（访问频率超过接口响应速率就拒绝）
 limit_req_zone $binary_remote_addr zone=contentRateLimit:10m rate=2r/s
 binary_remote_addr 是一种key，表示基于 remote_addr(客户端IP) 来做限流，binary_ 的目的是压缩内存占用量。
 zone：定义共享内存区来存储访问信息， contentRateLimit:10m 表示一个大小为10M，名字为contentRateLimit的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。
 rate 用于设置最大访问速率，rate=10r/s 表示每秒最多处理10个请求。Nginx 实际上以毫秒为粒度来跟踪请求信息，因此 10r/s 实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求.我们这里设置成2 方便测试。
 location中添加     limit_req zone=contentRateLimit burst=4 nodelay; 
 burst解决突发流量，同时访问的，先处理第一个,其他的放入队列,大于的直接拒绝503
 nodelay正常速度处理队列中请求
设置完重新加载配置文件 
cd /usr/local/openresty/nginx/sbin    ./ngxin -s reload
2.控制并发量（连接数）
limit_conn_zone $binary_remote_addr zone=addr:10m;
location中 limit_conn addr 2;  同一个ip地址最多有效连接为2




------------------------------lua安装------------------------------------
lua安装 	curl -R -O http://www.lua.org./ftp/lua-5.3.5.tar.gz
	tar zxf lua-5.3.5.tar.gz
	cd lua-5.3.5
	make linux test
如果报错安装相关依赖库
	yum install libtermcap-devel ncurses-devel libevent-devel readline-devel
执行查看   lua 
----------------------------交互式编程------------------------------
直接在命令行中输入程序
启动  lua -i  /lua
------------------------------脚本式---------------------------------
写入  xx.lua文件中执行
单行注释	--
多行注释  --[[ ]]--
变量：  默认全局变量  a=1    未初始化值为nil
            局部变量 local a=1

--------------数据类型-----------------
数据类型	描述
nil	这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。
boolean	包含两个值：false和true。
number	表示双精度类型的实浮点数
string	字符串由一对双引号或单引号来表示
function	由 C 或 Lua 编写的函数
userdata	表示任意存储在变量中的C数据结构
thread	表示执行的独立线路，用于执行协同程序
table	Lua 中的表（table）其实是一个“关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过“构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。
---------------流程控制语句---------------------
if   if(bool)
      then
      ********
      end
if..else  if(bool)
            then
            *******
             else
            ******
             end
-------------------------循环------------------------
while    while(conditon)
            do
            *********
            end
for        for  var=start,end,step
             do
             ********
              end
repeat    repeat
                  ******
               until(conditon)
-------------------函数----------------------------
function      function name(value1,value2)
	    ********
 	    end
--------------------表------------------------------
table 可创建不同的类型的数据，如数组、字典、对象
初始化  mytale={}
移除引用  mytale=nil
作为数据  mytale[1]="lua"
---------------------模块（类似于封装库类）------------
初始化	module={}
常量	module.constant="lua"
公有函数	function module.func1()******end
私有函数   local function func2()******end
return  module
引入其他模块  require("module_name")

 ------------------openresty(lua+nginx)--------------------
添加仓库  yum install yum-utils
	yum-config-manager --add-repo https://openresty.org/package/centos/opoenresty.repo
安装        yum install  openresty
安装默认目录  /usr/local/openresty
nginx在         /usr/local/openresy/nginx
修改/usr/local/openresty/nginx/conf/nginx.conf,将配置文件使用的根设置为root,目的就是将来要使用lua脚本的时候 ，直接可以加载在root下的lua脚本。
	cd /usr/local/openresty/nginx/conf
	vi nginx.conf
------------------------多级缓存实现---------------------------------
Mysql--->Redis
创建目录 /root/lua-->创建update_content.lua
代码：
ngx.header.content_type="application/json;charset=utf8"
local cjson = require("cjson")
local mysql = require("resty.mysql")
local uri_args = ngx.req.get_uri_args()
local id = uri_args["id"]        --->获取路径中参数
local db = mysql:new()
db:set_timeout(1000)
local props = {                     --->数据库配置
    host = "192.168.211.132",
    port = 3306,
    database = "changgou_content",
    user = "root",
    password = "123456"
}
local res = db:connect(props)
local select_sql = "select url,pic from tb_content where status ='1' and category_id="..id.." order by sort_order"
res = db:query(select_sql)
db:close()
local redis = require("resty.redis")
local red = redis:new()
red:set_timeout(2000)
local ip ="192.168.211.132"
local port = 6379
red:connect(ip,port)
red:set("content_"..id,cjson.encode(res))
red:close()
ngx.say("{flag:true}")

再修改/usr/local/openresty/nginx/conf/nginx.conf文件 添加头信息，和 location信息
#cache
lua_shared_dict dis_cache 128m;  -->定义lua缓存命名和大小
server {
    listen       80;
    server_name  localhost;
    location /update_content {
        content_by_lua_file /root/lua/update_content.lua;
    }
}

Mysql-->Redis-->openresty
/root/lua 创建read_content.lua
代码：
--设置响应头类型
ngx.header.content_type="application/json;charset=utf8"
--获取请求中的参数ID
local uri_args = ngx.req.get_uri_args();
local id = uri_args["id"];
--获取本地缓存
local cache_ngx=ngx.shared.dis_cache;
--根据id获取对应数据
local contentCache=cache_ngx:get('conten_cache_'..id);
--openresty中没有，从redis中获取
if contentCache=='' or contentCache ==nill then
--引入redis库
local redis = require("resty.redis");
--创建redis对象
local red = redis:new()
--设置超时时间
red:set_timeout(2000)
--连接
local ok, err = red:connect("192.168.211.132", 6379)
--获取key的值
local rescontent=red:get("content_"..id)
if ngx.null==rescontent then
local cjson=require("cjson");
local mysql=require("resty.mysql");
local db=mysql:new();
db:set_timeout(2000)
local props={
	host="192.168.211.132",
	port=3306,
	database="xxx",
                user="root",
	password="123456"
}
local res=db:connect(props);
local select_sql="select url,pic from tb_content where status='1' and category_id="..id.." order by sort_order";
res=db:query(select_sql);
local responsejson=cjson.encode(res);
--输出到返回响应中
ngx.say(responsejson)
db:close()
else
	cache_ngx:set('content_cache_'..id,rescontent,10*60)
	ngx.say(rescontent)
end
--关闭redis连接
red:close()
else
ngx.say(contentCache)
end

再修改nginx.conf，添加
location /read_content {
     content_by_lua_file /root/lua/read_content.lua;
}

